---
name: Deploy

# yamllint disable-line rule:truthy
on:
  workflow_call:
    secrets:
      CAS_API_KEY:
        required: false

jobs:
  information:
    if: |
      github.event_name == 'release'
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ‚ÑπÔ∏è Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      environment: ${{ steps.release.outputs.environment }}
      signer: ${{ steps.information.outputs.codenotary_signer }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v3
      - name: üöÄ Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.0
      - name: ‚ÑπÔ∏è Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "::set-output name=environment::${environment}"
          echo "::set-output name=version::${version}"

  deploy:
    name: üë∑ Build & Deploy ${{ matrix.architecture }}
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    steps:
      - name: üîÇ Wait for other runs to complete
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v3
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v3.0.5
        with:
          path: /tmp/.docker-cache
          key:
            docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha
            }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: üèó Set up Codenotary Community Attestation Service (CAS)
        uses: frenck/action-setup-cas@v0.1.0
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "::set-output name=from::${from}"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: üèó  Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: üöÄ Build
        uses: docker/build-push-action@v3.1.0
        with:
          load: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.environment }}
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
          # yamllint enable rule:line-length
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
      - name: üîè Notarize
        if: needs.information.outputs.signer != 'null'
        # yamllint disable rule:line-length
        run: |
          if ! cas authenticate \
            --signerID "${{ needs.information.outputs.signer }}" \
            --silent \
            "docker://ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}";
          then
            cas notarize \
              --api-key="${{ secrets.CAS_API_KEY }}" \
              --name "${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}" \
              "docker://ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}"
          fi
      - name: üöÄ Push
        # yamllint disable rule:line-length
        run: |
          docker push \
            "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.environment }}"
          docker push \
            "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}"

  manifest:
    name: üë∑ Build & Deploy Multi Arch Manifest
    needs:
      - information
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v3
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: üöÄ Create manifest
        shell: bash
        # yamllint disable rule:line-length
        run: |
          declare -a images

          for architecture in $( \
            echo '${{ needs.information.outputs.architectures }}' \
            | jq --raw-output '.[]'
          ); do
            images+=("ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${architecture}:${{ needs.information.outputs.version }}")
          done

          docker manifest create \
             "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}:${{ needs.information.outputs.environment }}" \
             "${images[@]}"

          docker manifest create \
             "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}:${{ needs.information.outputs.version }}" \
             "${images[@]}"

      - name: üèó  Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Push
        # yamllint disable rule:line-length
        run: |
          docker manifest push \
            "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}:${{ needs.information.outputs.environment }}"
          docker manifest push \
            "ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}:${{ needs.information.outputs.version }}"
